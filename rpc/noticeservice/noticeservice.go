// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.5
// Source: notice.proto

package noticeservice

import (
	"context"

	"notice/rpc/notice/notice"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	NoticeRequest  = notice.NoticeRequest
	NoticeResponse = notice.NoticeResponse

	NoticeService interface {
		Notice(ctx context.Context, in *NoticeRequest, opts ...grpc.CallOption) (*NoticeResponse, error)
	}

	defaultNoticeService struct {
		cli zrpc.Client
	}
)

func NewNoticeService(cli zrpc.Client) NoticeService {
	return &defaultNoticeService{
		cli: cli,
	}
}

func (m *defaultNoticeService) Notice(ctx context.Context, in *NoticeRequest, opts ...grpc.CallOption) (*NoticeResponse, error) {
	client := notice.NewNoticeServiceClient(m.cli.Conn())
	return client.Notice(ctx, in, opts...)
}
